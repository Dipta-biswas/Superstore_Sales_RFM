DROP DATABASE SUPERRFM;
CREATE DATABASE SUPERRFM;

SELECT * FROM superrfm.superstore;

SELECT COUNT(*) FROM  superrfm.SUPERSTORE;
use superrfm;

ALTER TABLE SUPERSTORE
MODIFY order_date TEXT;

SET SQL_SAFE_UPDATES = 0; -- 0 Indicate safe update mood turn off and 1 indicate safe update mood turn on
update SUPERSTORE
SET order_date = DATE_ADD('1899-12-30', INTERVAL ORDER_DATE DAY) ;

update SUPERSTORE
set ORDER_DATE = str_to_date(ORDER_DATE, '%Y-%m-%d');


select max(ORDER_DATE) 
from superstore;
select * from superstore;

CREATE OR REPLACE VIEW RFM_SCORE_SORTED AS
with superstore_aggrate_data as
(SELECT 
	CUSTOMER_NAME,
    datediff((SELECT MAX(ORDER_DATE)FROM SUPERSTORE),MAX(ORDER_DATE)) AS RECENCY_VALUE,
    COUNT(DISTINCT ORDER_ID) AS FREQUENCY_VALUE,
    ROUND(sum(SALES),0) AS MONETARY_VALUE
FROM SUPERSTORE
GROUP BY CUSTOMER_NAME),
RFM_SCORE AS
(select 
	C.*,
	NTILE(4) OVER (ORDER BY MONETARY_VALUE ASC) AS M_SCORE,
    NTILE(4) OVER (ORDER BY FREQUENCY_VALUE ASC) AS F_SCORE,
    NTILE(4) OVER (ORDER BY RECENCY_VALUE DESC) AS R_SCORE
from superstore_aggrate_data AS C)

SELECT R.CUSTOMER_NAME,R.Recency_value, R_SCORE, R.FREQUENCY_VALUE, F_SCORE, R.MONETARY_VALUE, M_SCORE,
	(M_SCORE + F_SCORE + R_SCORE) AS RFM_SCORE_TOTAL,
    concat_ws('', M_SCORE,F_SCORE,R_SCORE) AS  RFM_SCORE_COMBINATION
 FROM RFM_SCORE AS R;

SELECT * FROM rfm_score_sorted;

CREATE OR REPLACE VIEW RFM_ANALYSIS AS
SELECT 
    rfm_score_sorted.*,
    CASE
        WHEN RFM_SCORE_COMBINATION IN (111, 112, 121, 132, 211, 211, 212, 114, 141) THEN 'CHURNED CUSTOMER'
        WHEN RFM_SCORE_COMBINATION IN (133, 134, 143, 224, 334, 343, 344, 144) THEN 'SLIPPING AWAY, CANNOT LOSE'
        WHEN RFM_SCORE_COMBINATION IN (311, 411, 331) THEN 'NEW CUSTOMERS'
        WHEN RFM_SCORE_COMBINATION IN (222, 231, 221,  223, 233, 322) THEN 'POTENTIAL CHURNERS'
        WHEN RFM_SCORE_COMBINATION IN (323, 333,321, 341, 422, 332, 432) THEN 'ACTIVE'
        WHEN RFM_SCORE_COMBINATION IN (433, 434, 443, 444) THEN 'LOYAL'
    ELSE 'Other'
    END AS CUSTOMER_SEGMENT
FROM rfm_score_sorted;

SELECT 
	CUSTOMER_SEGMENT,
	COUNT(*) AS NUMBER_OF_CUSTOMERS,
    ROUND(AVG(MONETARY_VALUE),0) AS AVERAGE_MONETARY_VALUE
FROM RFM_ANALYSIS
GROUP BY CUSTOMER_SEGMENT;
